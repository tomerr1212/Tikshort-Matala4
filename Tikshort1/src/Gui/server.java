/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Gui;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;

import javax.xml.crypto.Data;


/**
 * @author Tomer Ortal Avichai
 */

public class server extends javax.swing.JFrame {
	private static final long serialVersionUID = 1L;
	private ArrayList<PrintWriter> clientOutputStreams;
	ArrayList<String> users;

	public class ClientHandler implements Runnable	{
		BufferedReader reader;
		Socket sock;
		PrintWriter client;

		public ClientHandler(Socket clientSocket, PrintWriter user) {
			client = user;
			try 
			{
				sock = clientSocket;
				InputStreamReader isReader = new InputStreamReader(sock.getInputStream());
				reader = new BufferedReader(isReader);
			}
			catch (Exception ex) 
			{
				jTextArea1.append("Unexpected error... \n");
			}

		}
		/*
		 * run function for clients on server
		 * @see java.lang.Runnable#run()
		 */
		@Override
		public void run() {
			String message,chat="Chat", connect = "Connect", disconnect = "Disconnect",all="all" ,showonline ="showonline" ;
			String[] data;


			try 
			{
				while ((message = reader.readLine()) != null) 
				{
					jTextArea1.append("Received: " + message + "\n");
					data = message.split(":");
					System.out.println(Arrays.toString(data));

					for (String token:data) 
					{
						jTextArea1.append(token + "\n");
					}

					if (data[2].equals(connect)) 
					{
						tellEveryone((data[0] + ":" + data[1] + ":" + chat));
						userAdd(data[0]);
					} 
					else if (data[2].equals(disconnect)) 
					{
						tellEveryone((data[0] + ":has disconnected." + ":" + chat));
						userRemove(data[0]);
					} 
					else if (data[3].equals(all)) 
					{
						tellEveryone(message);
					} 
					else if (!(data[3].equals(all))) {
						tellUser(message,users,data[3]);
					}
					else if(data[2].equals(showonline)) {
						tellEveryone(users.get(0));
					}
						
					else 
					{
						jTextArea1.append("No Conditions were met. \n");
					}
				} 
			} 
			catch (Exception ex) 
			{
				jTextArea1.append("Lost a connection. \n");
				ex.printStackTrace();
				clientOutputStreams.remove(client);
			} 
		}
	}
	/**
	 * Creates new form server
	 */
	public server() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		
		users = new ArrayList<String>();
		jStartButton1 = new javax.swing.JButton();
		jStopButton = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea("");
		jLabel1 = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jStartButton1.setText("Start");
		jStartButton1.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseReleased(java.awt.event.MouseEvent evt) {
				startServer(evt);
			}
		});

		jStopButton.setText("Stop");
		jStopButton.setEnabled(true);
		jStopButton.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseReleased(java.awt.event.MouseEvent evt) {
				StopServer(evt);
			}
		});

		jTextArea1.setColumns(20);
		jTextArea1.setRows(5);
		jScrollPane1.setViewportView(jTextArea1);

		jLabel1.setText("Server");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGap(18, 18, 18)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGroup(layout.createSequentialGroup()
										.addComponent(jStartButton1)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(jLabel1)
										.addGap(107, 107, 107)
										.addComponent(jStopButton)))
						.addContainerGap(22, Short.MAX_VALUE))
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jStartButton1)
								.addComponent(jStopButton)
								.addComponent(jLabel1))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
						.addContainerGap())
				);

		pack();
	}// </editor-fold>//GEN-END:initComponents


	/**
	 * Update Gui when the server starts
	 * @param evt
	 */
	private void startServer(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startServer
		jStopButton.setEnabled(true);
		jStartButton1.setEnabled(false);
		Thread starter = new Thread(new ServerStart());
		starter.start();

		jTextArea1.append("Server started...\n");

	}

	/**
	 * Update Gui when the server stops
	 * @param evt
	 */
	private void StopServer(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StopServer
		jStopButton.setEnabled(false);
		jStartButton1.setEnabled(true);
		System.out.println("Server stop");
		try 
		{
			Thread.sleep(5000);                 //5000 milliseconds is five second.
		} 
		catch(InterruptedException ex) {Thread.currentThread().interrupt();}

		tellEveryone("Server:is stopping and all users will be disconnected.\n:Chat");
		jTextArea1.append("Server stopping... \n");

		jTextArea1.setText("");

	}//GEN-LAST:event_StopServer

	public class ServerStart implements Runnable {
		@Override
		public void run() 
		{
			clientOutputStreams = new ArrayList();
			users = new ArrayList();  

			try 
			{
				ServerSocket serverSock = new ServerSocket(2222);

				while (true) 
				{
					Socket clientSock = serverSock.accept();
					PrintWriter writer = new PrintWriter(clientSock.getOutputStream());
					clientOutputStreams.add(writer);

					Thread listener = new Thread(new ClientHandler(clientSock, writer));
					listener.start();
					jTextArea1.append("Got a connection. \n");
				}
			}
			catch (Exception ex)
			{
				jTextArea1.append("Error making a connection. \n");
			}
		}
	}
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new server().setVisible(true);
			}
		});
	}
	/*
	 * message that will be send to every client who connect to the server
	 */
	public void tellEveryone(String message) {
		Iterator it = clientOutputStreams.iterator();

		while (it.hasNext()) 
		{
			try 
			{
				PrintWriter writer = (PrintWriter) it.next();
				writer.println(message);
				jTextArea1.append("Sending: " + message + "\n");
				writer.flush();
				jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());

			} 
			catch (Exception ex) 
			{
				jTextArea1.append("Error telling everyone. \n");
			}
		} 
	}
	/*
	 *message that will be send to one client who connect to the server 
	 */
	@SuppressWarnings("unlikely-arg-type")
	public void tellUser(String massage,ArrayList<String> users,String user) {
		for (int i = 0; i < users.size(); i++) {
			if(users.get(i).equals(user)) {
				PrintWriter writer = (PrintWriter)clientOutputStreams.get(i);
				writer.println(massage);
				writer.flush();				
			}			
		}
	}

	public void userRemove (String data) 
	{
		String message, add = ": :Connect", done = "Server: :Done", name = data;
		users.remove(name);
		String[] tempList = new String[(users.size())];
		users.toArray(tempList);

		for (String token:tempList) 
		{
			message = (token + add);
			tellEveryone(message);
		}
		tellEveryone(done);
	}
	/*
	 * addition clients the a user arraylist
	 */
	public void userAdd (String data) 
	{
		String message, add = ": :Connect", done = "Server: :Done", name = data;
		jTextArea1.append("Before " + name + " added. \n");
		users.add(name);
		jTextArea1.append("After " + name + " added. \n");
		String[] tempList = new String[(users.size())];
		users.toArray(tempList);

		for (String token:tempList) 
		{
			message = (token + add);
			tellEveryone(message);
		}
		tellEveryone(done);
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jStartButton1;
	private javax.swing.JButton jStopButton;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextArea jTextArea1;
	// End of variables declaration//GEN-END:variables
}
